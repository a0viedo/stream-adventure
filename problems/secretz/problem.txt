Se proveerá un archivo comprimido y cifrado mediante un pipe a process.stdin, para resolver este desafio
deberás, por cada linea del archivo, imprimir un hash md5 hexadecimal del
contenido del archivo, seguido de un espacio y el nombre del archivo, y luego un salto de linea.

Recibiras el nombre del codificador mediante provess.argv[2] y su contraseña mediante 
process.argv[3]. Puedes pasar estos parametros directamente a
`crypto.createDecipher()`.

La libreria zlib que obtienes mediante `require('zlib')` contiene el metodo
`zlib.createGunzip()` que devuelve un stream para ser comprimido (gunzipped)

El modulo `tar` de npm contiene el metodo `tar.Parse()` que emite un evento `'entry'`
por cada archivo en el tar suministrado. Cada objeto `entry` es un stream de lectura
del contenido del archivo y:

`entry.type` es el tipo de archivo ('Archivo', 'Carpeta', etc)
`entry.path` es la ruta al archivo

Ejemplo de uso del modulo 'tar':

    var tar = require('tar');
    var parser = tar.Parse();
    parser.on('entry', function (e) {
        console.dir(e);
    });
    var fs = require('fs');
    fs.createReadStream('file.tar').pipe(parser);

Utiliza `crypto.createHash('md5', { encoding: 'hex' }) para generar un stream que
imprima un hash md5 hexadecimal del contenido escrito en el.

Asegurate de ejecutar el comando `npm install tar through` en el directorio donde se encuentra tu archivo de solucion.
